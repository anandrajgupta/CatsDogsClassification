#Let's load the Dataset

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
from tqdm import tqdm

DATADIR = "C:/Users/anand.g1/Desktop/[Fresh 1] TestVisionCode/Dataset"

CATEGORIES = ["Dog", "Cat"]

IMG_SIZE = 70
training_data = [] #List Data Type

def create_training_data():
    for category in CATEGORIES:  #Dogs and Cats 

        path = os.path.join(DATADIR,category)   #create path to dogs and cats
        class_num = CATEGORIES.index(category)  #which Class: 0=dog 1=cat

        for img in tqdm(os.listdir(path)):  #iterate over each image per dogs and cats
                img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE)  #convert to array
                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  #resize to normalize data size
                training_data.append([new_array, class_num])  #add this to our training_data

create_training_data()
print(len(training_data))

import random
random.shuffle(training_data)

#for sample in training_data[:10]: #Slicing the List elements from Begining to 10th element
    #print(sample[1]) #sample is containing [Matrix, Class] and we want to print the class only so, sample[1]
    
X = []
y = []

for features,label in training_data:
    X.append(features)
    y.append(label)

X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)
y = np.asarray(y)

import pickle

pickle_out = open("X.pickle",'wb')
pickle.dump(X, pickle_out)
pickle_out.close()

pickle_out_oneMore = open("y.pickle",'wb')
pickle.dump(y, pickle_out_oneMore)
pickle_out_oneMore.close()

# Let's make our Convolution Network and Train the Model

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.callbacks import TensorBoard
import pickle
import time
import numpy as np

X = (pickle.load(open("X.pickle", "rb"))) 
y = (pickle.load(open("y.pickle", "rb")))

X = X/255.0

dense_layers = [0]
layer_sizes = [64]
conv_layers = [3]

for dense_layer in dense_layers:
    for layer_size in layer_sizes:
        for conv_layer in conv_layers:
            NAME = "{}-conv-{}-nodes-{}-dense-{}".format(conv_layer, layer_size, dense_layer, int(time.time()))
            print(NAME)

            model = Sequential()

            model.add(Conv2D(layer_size, (3, 3), input_shape=X.shape[1:]))
            model.add(Activation('relu'))
            model.add(MaxPooling2D(pool_size=(2, 2)))

            for l in range(conv_layer-1):
                model.add(Conv2D(layer_size, (3, 3)))
                model.add(Activation('relu'))
                model.add(MaxPooling2D(pool_size=(2, 2)))

            model.add(Flatten())

            for _ in range(dense_layer): # _ or l?
                model.add(Dense(layer_size))
                model.add(Activation('relu'))

            model.add(Dense(1))
            model.add(Activation('sigmoid'))

            tensorboard = TensorBoard(log_dir="logs\{}".format(NAME))

            model.compile(loss='binary_crossentropy',
                          optimizer='adam',
                          metrics=['accuracy'],
                          )

            model.fit(X, y,
                      batch_size=32,
                      epochs=10,
                      validation_split=0.3,
                      callbacks=[tensorboard])

model.save('64x3-CNN.model')

# Let's test our model now :)

import cv2
import tensorflow as tf

CATEGORIES = ["Dog", "Cat"]  # will use this to convert prediction num to string value

def prepare(filepath):
    IMG_SIZE = 70
    img_array = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)  # read in the image, convert to grayscale
    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  # resize image to match model's expected sizing
    new_array = new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 1)  # return the image with shaping that TF wants.
    return new_array/1 #Anyhow - Somehow: Divding it by a number is causing the data type to modify and suit the argument that is required in "model.predict"

model = tf.keras.models.load_model('64x3-CNN.model')

prediction = model.predict([prepare(r'C:\Users\anand.g1\Desktop\[Fresh 1] TestVisionCode\Dataset\Testing\catNet2.jpg')])
print(prediction)
print(CATEGORIES[int(prediction[0][0])])



